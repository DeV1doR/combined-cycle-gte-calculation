from wspru_api import WspRuAPI
from init_data import INIT_DATA
from gte_r import GTECalcR


wspru_api = WspRuAPI()


class SPECalcR(GTECalcR):

    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)
        self.p1gte = self.piair
        self.T1gte = self.Tiair
        self._check_boiler_temperature()
        self.Q1_cc = self.Q1_gte

    def _check_boiler_temperature(self):
        """Check difference of temperature before boiler and after
        (not less than 20 oC).
        """
        _diff = self.T4gte - self.Tb_out
        if _diff < 20:
            raise BaseException('Difference of GTE exhausted gases {0} and '
                'boiler out in cycle {1} must be more than 20 oC. (Now {2})' \
                .format(
                    self.T4gte, self.Tb_out, _diff))
        return

    @property
    def pd(self):
        """Steam pressure in boiler drum.
        """
        return self.p4gte + self.deltaps

    @property
    def hb_in(self):
        """-->(in) steam enthalpy of boiler (J/kg of water steam).
        """
        return wspru_api.wspg('HGST', self.gsg, self.T4gte)

    @property
    def hb_out(self):
        """<--(out) steam enthalpy from boiler (J/kg of water steam).
        """
        return wspru_api.wsp('HPT', self.pb_out, self.Tb_out)

    @property
    def Db(self):
        """Steam consumption generated by boiler (kg of water steam / sec).
        """
        return self.Gr * self.hb_in / float(self.hb_out)

    @property
    def pst_in(self):
        """Steam pressure at the inlet of ST (Pa).
        """
        return self.pb_out * (1 - self.sigmapp)

    @property
    def hst_in(self):
        """Steam enthalpy at the inlet of ST (J/kgws).
        """
        return wspru_api.wsp('HPT', self.pst_in, self.Tb_out)

    @property
    def h2spe(self):
        """Steam enthalpy after ST (J/kgws).
        """
        return wspru_api.wsp('HPT', self.p2spe, self.T2spe)

    @property
    def hout(self):
        """Enthalpy of boiler exhausted gases (J/kgg).
        """
        return self.hb_in - self.ETAb * (self.hb_in - wspru_api.wspg('HGST', self.gsg, self.Tiair))

    @property
    def teta_out(self):
        """Temperature of exhausted gases (K).
        """
        return wspru_api.wspg('TGSH', self.gsg, self.hout)

    @property
    def Pst(self):
        """Inner ST power (W).
        """
        return self.Db * (self.hst_in - self.h2spe)

    @property
    def NelSPE(self):
        """Electric power of SPE (W).
        """
        return self.Pst * self.ETAm_spe * self.ETAg_spe

    @property
    def NelCC(self):
        """Electric power of CC (W).
        """
        return self.NelGTE + self.NelSPE

    @property
    def Q1b(self):
        """Amount of heat given for boiler (W).
        """
        return self.Q1_gte * (1 - self.ETAelGTE)

    @property
    def Q1_spe(self):
        """Amount of heat given for SPE (W).
        """
        return self.Q1b * self.ETAb

    @property
    def ETAelSPE(self):
        """Electrical efficiency of SPE.
        """
        return self.NelSPE / float(self.Q1_spe)

    @property
    def ETAelCC(self):
        """Electrical efficiency of CC.
        """
        return self.NelCC / float(self.Q1_cc)

    # @property
    # def ETAb(self):
    #     """Boiler efficiency.
    #     """
    #     return (self.T4gte - self.teta_out) / float(self.T4gte - self.Tiair)


if __name__ == '__main__':
    real_calc = SPECalcR(**INIT_DATA)
    print real_calc.NelCC
    print real_calc.ETAelCC
